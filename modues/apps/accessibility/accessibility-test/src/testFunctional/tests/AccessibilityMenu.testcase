@component-name = "portal-platform-experience"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Accessibility Menu";

	setUp {
		TestCase.setUpPortalInstance();

		TestUtils.hardRefresh();

		User.firstLoginPG();

		task ("Given Accessibility Menu enabled at Instance Settings level") {
			AccessibilityMenu.activateAccessibilityMenu(portlet = "Instance Settings");
		}

		task ("And navigate to home page") {
			Navigator.openURL();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();

			TestUtils.hardRefresh();
		}
		else {
			TestUtils.hardRefresh();
		}
	}

	@description = "LPS-178192. Verifies that the user can disable it by Instance Settings"
	@priority = 5
	test CanBeDisabledByInstanceSettings {
		property portal.acceptance = "true";

		task ("Given user with admin privileges") {
			Navigator.openURL();
		}

		task ("When Accessibility Menu is reset to default values") {
			AccessibilityMenu.resetDefaultValues(portlet = "Instance Settings");
		}

		task ("Then Accessibility Menu cannot be accessed") {
			AccessibilityMenu.assertCannotAccessAccessibilityMenuModal();
		}

		task ("And Accessibility Menu cannot be reached through the user's profile menu") {
			AccessibilityMenu.assertCannotAccessAccessibilityMenuModalByTheUserProfileMenu();
		}
	}

	@description = "LPS-178192. Verifies Expanded Text effects toggle can be enabled."
	@priority = 4
	test CanEnableExpandedText {
		property portal.acceptance = "true";

		task ("When toggle on expanded text") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Expanded Text");
		}

		task ("Then a body class “c-prefers-expanded-text” is applied") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Expanded Text",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementPresent(
				key_class = "c-prefers-expanded-text",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}
	}

	@description = "LPS-178192. Verifies Increased Text Spacing effects toggle can be enabled."
	@priority = 4
	test CanEnableIncreasedTextSpacing {
		property portal.acceptance = "true";

		task ("When toggle on increased text spacing") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Increased Text Spacing");
		}

		task ("Then A body class “c-prefers-letter-spacing-1” is applied") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Increased Text Spacing",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementPresent(
				key_class = "c-prefers-letter-spacing-1",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}
	}

	@description = "LPS-178192. Verifies reduced motion effects toggle can be enabled."
	@priority = 4
	test CanEnableReducedMotion {
		property portal.acceptance = "true";

		task ("When toggle on reduced motion") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Reduced Motion");
		}

		task ("Then A body class “c-prefers-reduced-motion” is applied") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Reduced Motion",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementPresent(
				key_class = "c-prefers-reduced-motion",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}
	}

	@description = "LPS-178192. Verifies the modified accessibility configuration state is persisted in database for signed in user."
	@priority = 5
	test ChangedConfigurationSettingByAuthenticatedUserWillBeSavedInDatabase {
		property portal.acceptance = "true";

		task ("Given created new user A") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfnA",
				userLastName = "userlnA",
				userScreenName = "usersnA");
		}

		task ("When sign in as user A") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfnA userlnA");
		}

		task ("And toggle an accessibility configuration (set underline to ON state)") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Underlined Links");
		}

		task ("And sign out") {
			SignOut.signOut();
		}

		task ("And guest user sets shows Underlined Links configuration to ON") {
			AccessibilityMenu.disableSpecificOption(key_toggleSwitchLabel = "Underlined Links");
		}

		task ("And when sign in as user A") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfnA userlnA");
		}

		task ("When open Accessibility Menu") {
			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("Then accessibility configuration states persisted in database for user A") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "LPS-178192. Verifies accessibility menu modal toggle switches are keyboard accessible."
	@priority = 3
	test ConfigurationCanBeToggledWithKeyboard {
		task ("Given Accessibility Menu") {
			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("And show underline configuration is at ON state") {
			Check.checkNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task ("When focus on a configuration toggle with keyboard") {
			KeyPress(
				key_modalTitle = "Accessibility Menu",
				locator1 = "Button#CLOSE_MODAL",
				value1 = "\TAB");

			AssertElementFocused(
				checkboxName = "Underlined Links",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("And toggle a configuration with 'Enter' key") {
			KeyPress(
				checkboxName = "Underlined Links",
				locator1 = "Checkbox#ANY_CHECKBOX",
				value1 = "\ENTER");
		}

		task ("Then configuration is toggled to OFF state") {
			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task ("And When toggle configuration with 'Enter' key") {
			KeyPress(
				checkboxName = "Underlined Links",
				locator1 = "Checkbox#ANY_CHECKBOX",
				value1 = "\ENTER");
		}

		task ("Then configuration is toggled to ON state") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "LPS-178192. Verifies that the guest preferences extend and persist to other users."
	@priority = 4
	test FirstTimeSignInConfigUsesLocalStorageIfConfigNotChangedWhileSignedIn {
		property portal.acceptance = "true";

		task ("Given new created user A") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfnA",
				userLastName = "userlnA",
				userScreenName = "usersnA");
		}

		task ("And new created user B") {
			JSONUser.addUser(
				userEmailAddress = "usereb@liferay.com",
				userFirstName = "userfnB",
				userLastName = "userlnB",
				userScreenName = "usersnB");
		}

		task ("And guest user permissions") {
			SignOut.signOut();
		}

		task ("And default show underline is set to ON") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Underlined Links");
		}

		task ("When sign in as user A") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfnA userlnA");
		}

		task ("And shows that guest preferences persist") {
			AccessibilityMenu.openAccessibilityMenu();

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task ("And toggle show underline to OFF state") {
			Refresh();

			AccessibilityMenu.disableSpecificOption(key_toggleSwitchLabel = "Underlined Links");
		}

		task ("And sign out") {
			SignOut.signOut();
		}

		task ("And sign in as user B") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "usereb@liferay.com",
				userLoginFullName = "userfnB userlnB");
		}

		task ("And open accessibility menu ") {
			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("Then show underline is set to ON") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "LPS-178192. Verifies focus remains on current configuration toggle after toggling."
	@priority = 3
	test FocusWillRemainOnCurrentToggleSetting {
		property portal.acceptance = "false";

		task ("Given Accessibility Menu") {
			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("When toggle a configuration with 'Enter' key") {
			KeyPress(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH",
				value1 = "\ENTER");
		}

		task ("Then focus stays on the current configuration toggle") {
			AssertElementFocused(
				checkboxName = "Underlined Links",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = "LPS-178192. Verifies guest configured settings can persist in browser local storage."
	@priority = 4
	test GuestConfigurationCanPersistInBrowserLocalStorage {
		property portal.acceptance = "true";

		task ("Given guest user") {
			SignOut.signOut();
		}

		task ("When toggle underline to ON state") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Underlined Links");
		}

		task ("And open a new browser tab") {
			var portalURL = PropsUtil.get("portal.url");

			Open.openInTheNewTab(value1 = ${portalURL});
		}

		task ("And open accessibility menu") {
			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("Then menu option is set to ON state") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "LPS-178192. Verifies OFF state can persist to first login user."
	@priority = 3
	test GuestConfigurationOffStateWillPersistForFirstLogin {
		task ("Given create a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfnA",
				userLastName = "userlnA",
				userScreenName = "usersnA");
		}

		task ("And as a guest user") {
			SignOut.signOut();
		}

		task ("And toggle underline is set to ON state") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Reduced Motion");
		}

		task ("And toggle underline is set to OFF state") {
			AccessibilityMenu.disableSpecificOption(key_toggleSwitchLabel = "Underlined Links");
		}

		task ("When sign in as a new user for first time") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfnA userlnA");
		}

		task ("Then configuration is persisted to first time signed in user") {
			AssertElementNotPresent(
				key_class = "c-prefers-link-underline",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");

			AccessibilityMenu.openAccessibilityMenu();

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "LPS-178192. Verifies ON state can persist to first login user."
	@priority = 3
	test GuestConfigurationOnStateWillPersistForFirstLogin {
		property portal.acceptance = "true";

		task ("Given create a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfnA",
				userLastName = "userlnA",
				userScreenName = "usersnA");
		}

		task ("And as a guest user") {
			SignOut.signOut();
		}

		task ("And toggle show underline to ON state") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Underlined Links");
		}

		task ("When sign in as a new user for first time") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfnA userlnA");
		}

		task ("Then configuration is persisted to first time signed in user") {
			AssertElementPresent(
				key_class = "c-prefers-link-underline",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");

			AccessibilityMenu.openAccessibilityMenu();

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "LPS-178192. Verifies accessibility menu quick link is keyboard focusable."
	@priority = 5
	test LinkIsKeyboardFocusable {
		property portal.acceptance = "true";

		task ("When press tab key from 'Skip to Content' link") {
			AccessibilityMenu.goToAccessibilityMenuQuickLink();
		}

		task ("Then Accessibility Menu link is focusable") {
			AssertElementFocused(
				key_link = "Open Accessibility Menu",
				locator1 = "AccessibilityMenu#QUICK_LINK");
		}
	}

	@description = "LPS-178192. Verifies accessibility menu modal can be accessed by keyboard."
	@priority = 5
	test ModalIsKeyboardAccessible {
		property portal.acceptance = "true";

		task ("When Accessibility Menu is focused with keyboard") {
			AccessibilityMenu.goToAccessibilityMenuQuickLink();
		}

		task ("And access Accessibility Menu link with 'Enter' key") {
			KeyPress(
				key_link = "Accessibility Menu",
				locator1 = "AccessibilityMenu#QUICK_LINK",
				value1 = "\ENTER");
		}

		task ("Then Accessibility Menu modal is present") {
			AssertElementPresent(
				key_modal_title = "Accessibility Menu",
				locator1 = "AccessibilityMenu#MODAL_TITLE");
		}

		task ("And can navigate to a switch toggle with keyboard") {
			KeyPress(
				locator1 = "//body",
				value1 = "\TAB");

			KeyPress(
				key_modalTitle = "Accessibility Menu",
				locator1 = "Button#CLOSE_MODAL",
				value1 = "\TAB");

			AssertElementFocused(
				checkboxName = "Underlined Links",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = "LPS-178192. Verifies show underline effects configuration can apply an underline class to link elements in body of page."
	@priority = 5
	test ShowUnderlineEffectsCanApplyUnderlineClassToLinksImmediately {
		property portal.acceptance = "true";

		task ("And underline class not applied to body element") {
			AccessibilityMenu.openAccessibilityMenu();

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementNotPresent(
				key_class = "c-prefers-link-underline",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}

		task ("When access Accessibility Menu") {
			Refresh();

			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("And toggle ON show underline effect in links") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task ("Then body element has underline class applied") {
			AssertElementPresent(
				key_class = "c-prefers-link-underline",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}
	}

	@description = "LPS-178192. Verifies show underline effects in links toggle is enabled by default."
	@priority = 3
	test ShowUnderlineEffectsIsDisabledByDefault {
		property portal.acceptance = "false";

		task ("Given home page") {
			Navigator.openURL();
		}

		task ("When access accessibility menu") {
			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("Then show underline effects in links is toggled OFF state") {
			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementNotPresent(
				key_class = "c-prefers-link-underline",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}
	}

	@description = "LPS-178192. Verifies only if the setting has never been changed by the user, either when signed in or not signed in, will the default value be displayed."
	@priority = 5
	test UntoggledSettingsAreAppliedImmediately {
		property portal.acceptance = "true";

		task ("And underline class is applied to body element") {
			AccessibilityMenu.enableSpecificOption(key_toggleSwitchLabel = "Underlined Links");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementPresent(
				key_class = "c-prefers-link-underline",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}

		task ("When access Accessibility Menu") {
			Navigator.openURL();

			AccessibilityMenu.openAccessibilityMenu();
		}

		task ("And toggle OFF show underline effect in links") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task ("Then Powered by Liferay link does not have underline class applied") {
			AssertElementNotPresent(
				key_class = "c-prefers-link-underline",
				locator1 = "AccessibilityMenu#BODY_SPECIFIC_CLASS");
		}
	}

}